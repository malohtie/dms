(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~elements-timeline~plugins-gallery"],{

/***/ "./node_modules/blueimp-gallery/css/blueimp-gallery.min.css":
/*!******************************************************************!*\
  !*** ./node_modules/blueimp-gallery/css/blueimp-gallery.min.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../css-loader??ref--6-1!../../postcss-loader/src??ref--6-2!./blueimp-gallery.min.css */ \"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/blueimp-gallery/css/blueimp-gallery.min.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2Nzcy9ibHVlaW1wLWdhbGxlcnkubWluLmNzcz8wOWZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxjQUFjLG1CQUFPLENBQUMsNE9BQTZHOztBQUVuSSw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMseUZBQXNDOztBQUUzRDs7QUFFQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ibHVlaW1wLWdhbGxlcnkvY3NzL2JsdWVpbXAtZ2FsbGVyeS5taW4uY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LTIhLi9ibHVlaW1wLWdhbGxlcnkubWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi0yIS4vYmx1ZWltcC1nYWxsZXJ5Lm1pbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi0yIS4vYmx1ZWltcC1nYWxsZXJ5Lm1pbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/css/blueimp-gallery.min.css\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/error.png":
/*!****************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/error.png ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/error.png?90901890fbf9b379405f47a23313e63b\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy9lcnJvci5wbmc/NWExYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ibHVlaW1wLWdhbGxlcnkvaW1nL2Vycm9yLnBuZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCIvaW1hZ2VzL3ZlbmRvci9ibHVlaW1wLWdhbGxlcnkvZXJyb3IucG5nPzkwOTAxODkwZmJmOWIzNzk0MDVmNDdhMjMzMTNlNjNiXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/error.png\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/error.svg":
/*!****************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/error.svg ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/error.svg?19ee6b7e6642d75d6144b0c8209c93d6\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy9lcnJvci5zdmc/NDA5OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9ibHVlaW1wLWdhbGxlcnkvaW1nL2Vycm9yLnN2Zy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCIvaW1hZ2VzL3ZlbmRvci9ibHVlaW1wLWdhbGxlcnkvZXJyb3Iuc3ZnPzE5ZWU2YjdlNjY0MmQ3NWQ2MTQ0YjBjODIwOWM5M2Q2XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/error.svg\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/loading.gif":
/*!******************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/loading.gif ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/loading.gif?05992d3434d3589b38a3a5431842d38f\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy9sb2FkaW5nLmdpZj8zMzA3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9pbWcvbG9hZGluZy5naWYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiL2ltYWdlcy92ZW5kb3IvYmx1ZWltcC1nYWxsZXJ5L2xvYWRpbmcuZ2lmPzA1OTkyZDM0MzRkMzU4OWIzOGEzYTU0MzE4NDJkMzhmXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/loading.gif\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/play-pause.png":
/*!*********************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/play-pause.png ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/play-pause.png?a012413b54276e2eefd145c7aec60f93\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy9wbGF5LXBhdXNlLnBuZz9lYzJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9pbWcvcGxheS1wYXVzZS5wbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiL2ltYWdlcy92ZW5kb3IvYmx1ZWltcC1nYWxsZXJ5L3BsYXktcGF1c2UucG5nP2EwMTI0MTNiNTQyNzZlMmVlZmQxNDVjN2FlYzYwZjkzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/play-pause.png\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/play-pause.svg":
/*!*********************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/play-pause.svg ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/play-pause.svg?21dfa3149b274acb9c1819d342a6a169\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy9wbGF5LXBhdXNlLnN2Zz80ZDJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9pbWcvcGxheS1wYXVzZS5zdmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiL2ltYWdlcy92ZW5kb3IvYmx1ZWltcC1nYWxsZXJ5L3BsYXktcGF1c2Uuc3ZnPzIxZGZhMzE0OWIyNzRhY2I5YzE4MTlkMzQyYTZhMTY5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/play-pause.svg\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/video-play.png":
/*!*********************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/video-play.png ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/video-play.png?288308b2037f409d293916c7a3913f20\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy92aWRlby1wbGF5LnBuZz8xNWU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9pbWcvdmlkZW8tcGxheS5wbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiL2ltYWdlcy92ZW5kb3IvYmx1ZWltcC1nYWxsZXJ5L3ZpZGVvLXBsYXkucG5nPzI4ODMwOGIyMDM3ZjQwOWQyOTM5MTZjN2EzOTEzZjIwXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/video-play.png\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/img/video-play.svg":
/*!*********************************************************!*\
  !*** ./node_modules/blueimp-gallery/img/video-play.svg ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/images/vendor/blueimp-gallery/video-play.svg?9b737958b1644b46b23904e53afcac50\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2ltZy92aWRlby1wbGF5LnN2Zz80NDQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9pbWcvdmlkZW8tcGxheS5zdmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiL2ltYWdlcy92ZW5kb3IvYmx1ZWltcC1nYWxsZXJ5L3ZpZGVvLXBsYXkuc3ZnPzliNzM3OTU4YjE2NDRiNDZiMjM5MDRlNTNhZmNhYzUwXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/img/video-play.svg\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js":
/*!***********************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * blueimp Gallery Fullscreen JS\n * https://github.com/blueimp/Gallery\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ \"./node_modules/blueimp-gallery/js/blueimp-helper.js\"), __webpack_require__(/*! ./blueimp-gallery */ \"./node_modules/blueimp-gallery/js/blueimp-gallery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(function ($, Gallery) {\n  'use strict'\n\n  $.extend(Gallery.prototype.options, {\n    // Defines if the gallery should open in fullscreen mode:\n    fullScreen: false\n  })\n\n  var initialize = Gallery.prototype.initialize\n  var close = Gallery.prototype.close\n\n  $.extend(Gallery.prototype, {\n    getFullScreenElement: function () {\n      return (\n        document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        document.mozFullScreenElement ||\n        document.msFullscreenElement\n      )\n    },\n\n    requestFullScreen: function (element) {\n      if (element.requestFullscreen) {\n        element.requestFullscreen()\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen()\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen()\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen()\n      }\n    },\n\n    exitFullScreen: function () {\n      if (document.exitFullscreen) {\n        document.exitFullscreen()\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen()\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen()\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen()\n      }\n    },\n\n    initialize: function () {\n      initialize.call(this)\n      if (this.options.fullScreen && !this.getFullScreenElement()) {\n        this.requestFullScreen(this.container[0])\n      }\n    },\n\n    close: function () {\n      if (this.getFullScreenElement() === this.container[0]) {\n        this.exitFullScreen()\n      }\n      close.call(this)\n    }\n  })\n\n  return Gallery\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmx1ZWltcC1nYWxsZXJ5L2pzL2JsdWVpbXAtZ2FsbGVyeS1mdWxsc2NyZWVuLmpzPzg2ODAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQztBQUNEO0FBQ0EsTUFBTSxJQUEwQztBQUNoRDtBQUNBLElBQUksaUNBQU8sQ0FBQyxrR0FBa0IsRUFBRSxvR0FBbUIsQ0FBQyxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLG9HQUFDO0FBQzlELEdBQUcsTUFBTSxFQUdOO0FBQ0gsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JsdWVpbXAtZ2FsbGVyeS9qcy9ibHVlaW1wLWdhbGxlcnktZnVsbHNjcmVlbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBibHVlaW1wIEdhbGxlcnkgRnVsbHNjcmVlbiBKU1xuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvR2FsbGVyeVxuICpcbiAqIENvcHlyaWdodCAyMDEzLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgJ3VzZSBzdHJpY3QnXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgQU1EIG1vZHVsZTpcbiAgICBkZWZpbmUoWycuL2JsdWVpbXAtaGVscGVyJywgJy4vYmx1ZWltcC1nYWxsZXJ5J10sIGZhY3RvcnkpXG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzOlxuICAgIGZhY3Rvcnkod2luZG93LmJsdWVpbXAuaGVscGVyIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdy5ibHVlaW1wLkdhbGxlcnkpXG4gIH1cbn0pKGZ1bmN0aW9uICgkLCBHYWxsZXJ5KSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gICQuZXh0ZW5kKEdhbGxlcnkucHJvdG90eXBlLm9wdGlvbnMsIHtcbiAgICAvLyBEZWZpbmVzIGlmIHRoZSBnYWxsZXJ5IHNob3VsZCBvcGVuIGluIGZ1bGxzY3JlZW4gbW9kZTpcbiAgICBmdWxsU2NyZWVuOiBmYWxzZVxuICB9KVxuXG4gIHZhciBpbml0aWFsaXplID0gR2FsbGVyeS5wcm90b3R5cGUuaW5pdGlhbGl6ZVxuICB2YXIgY2xvc2UgPSBHYWxsZXJ5LnByb3RvdHlwZS5jbG9zZVxuXG4gICQuZXh0ZW5kKEdhbGxlcnkucHJvdG90eXBlLCB7XG4gICAgZ2V0RnVsbFNjcmVlbkVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICAgIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8XG4gICAgICAgIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVsZW1lbnRcbiAgICAgIClcbiAgICB9LFxuXG4gICAgcmVxdWVzdEZ1bGxTY3JlZW46IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICBlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICBlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKClcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgIGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIGV4aXRGdWxsU2NyZWVuOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50LndlYmtpdENhbmNlbEZ1bGxTY3JlZW4oKVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpbml0aWFsaXplLmNhbGwodGhpcylcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiAmJiAhdGhpcy5nZXRGdWxsU2NyZWVuRWxlbWVudCgpKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZ1bGxTY3JlZW4odGhpcy5jb250YWluZXJbMF0pXG4gICAgICB9XG4gICAgfSxcblxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5nZXRGdWxsU2NyZWVuRWxlbWVudCgpID09PSB0aGlzLmNvbnRhaW5lclswXSkge1xuICAgICAgICB0aGlzLmV4aXRGdWxsU2NyZWVuKClcbiAgICAgIH1cbiAgICAgIGNsb3NlLmNhbGwodGhpcylcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIEdhbGxlcnlcbn0pXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-video.js":
/*!******************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-video.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * blueimp Gallery Video Factory JS\n * https://github.com/blueimp/Gallery\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ \"./node_modules/blueimp-gallery/js/blueimp-helper.js\"), __webpack_require__(/*! ./blueimp-gallery */ \"./node_modules/blueimp-gallery/js/blueimp-gallery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(function ($, Gallery) {\n  'use strict'\n\n  $.extend(Gallery.prototype.options, {\n    // The class for video content elements:\n    videoContentClass: 'video-content',\n    // The class for video when it is loading:\n    videoLoadingClass: 'video-loading',\n    // The class for video when it is playing:\n    videoPlayingClass: 'video-playing',\n    // The list object property (or data attribute) for the video poster URL:\n    videoPosterProperty: 'poster',\n    // The list object property (or data attribute) for the video sources array:\n    videoSourcesProperty: 'sources'\n  })\n\n  var handleSlide = Gallery.prototype.handleSlide\n\n  $.extend(Gallery.prototype, {\n    handleSlide: function (index) {\n      handleSlide.call(this, index)\n      if (this.playingVideo) {\n        this.playingVideo.pause()\n      }\n    },\n\n    videoFactory: function (obj, callback, videoInterface) {\n      var that = this\n      var options = this.options\n      var videoContainerNode = this.elementPrototype.cloneNode(false)\n      var videoContainer = $(videoContainerNode)\n      var errorArgs = [\n        {\n          type: 'error',\n          target: videoContainerNode\n        }\n      ]\n      var video = videoInterface || document.createElement('video')\n      var url = this.getItemProperty(obj, options.urlProperty)\n      var type = this.getItemProperty(obj, options.typeProperty)\n      var title = this.getItemProperty(obj, options.titleProperty)\n      var altText =\n        this.getItemProperty(obj, this.options.altTextProperty) || title\n      var posterUrl = this.getItemProperty(obj, options.videoPosterProperty)\n      var posterImage\n      var sources = this.getItemProperty(obj, options.videoSourcesProperty)\n      var source\n      var playMediaControl\n      var isLoading\n      var hasControls\n      videoContainer.addClass(options.videoContentClass)\n      if (title) {\n        videoContainerNode.title = title\n      }\n      if (video.canPlayType) {\n        if (url && type && video.canPlayType(type)) {\n          video.src = url\n        } else if (sources) {\n          while (sources.length) {\n            source = sources.shift()\n            url = this.getItemProperty(source, options.urlProperty)\n            type = this.getItemProperty(source, options.typeProperty)\n            if (url && type && video.canPlayType(type)) {\n              video.src = url\n              break\n            }\n          }\n        }\n      }\n      if (posterUrl) {\n        video.poster = posterUrl\n        posterImage = this.imagePrototype.cloneNode(false)\n        $(posterImage).addClass(options.toggleClass)\n        posterImage.src = posterUrl\n        posterImage.draggable = false\n        posterImage.alt = altText\n        videoContainerNode.appendChild(posterImage)\n      }\n      playMediaControl = document.createElement('a')\n      playMediaControl.setAttribute('target', '_blank')\n      if (!videoInterface) {\n        playMediaControl.setAttribute('download', title)\n      }\n      playMediaControl.href = url\n      if (video.src) {\n        video.controls = true\n        ;(videoInterface || $(video))\n          .on('error', function () {\n            that.setTimeout(callback, errorArgs)\n          })\n          .on('pause', function () {\n            if (video.seeking) return\n            isLoading = false\n            videoContainer\n              .removeClass(that.options.videoLoadingClass)\n              .removeClass(that.options.videoPlayingClass)\n            if (hasControls) {\n              that.container.addClass(that.options.controlsClass)\n            }\n            delete that.playingVideo\n            if (that.interval) {\n              that.play()\n            }\n          })\n          .on('playing', function () {\n            isLoading = false\n            videoContainer\n              .removeClass(that.options.videoLoadingClass)\n              .addClass(that.options.videoPlayingClass)\n            if (that.container.hasClass(that.options.controlsClass)) {\n              hasControls = true\n              that.container.removeClass(that.options.controlsClass)\n            } else {\n              hasControls = false\n            }\n          })\n          .on('play', function () {\n            window.clearTimeout(that.timeout)\n            isLoading = true\n            videoContainer.addClass(that.options.videoLoadingClass)\n            that.playingVideo = video\n          })\n        $(playMediaControl).on('click', function (event) {\n          that.preventDefault(event)\n          if (isLoading) {\n            video.pause()\n          } else {\n            video.play()\n          }\n        })\n        videoContainerNode.appendChild(\n          (videoInterface && videoInterface.element) || video\n        )\n      }\n      videoContainerNode.appendChild(playMediaControl)\n      this.setTimeout(callback, [\n        {\n          type: 'load',\n          target: videoContainerNode\n        }\n      ])\n      return videoContainerNode\n    }\n  })\n\n  return Gallery\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/js/blueimp-gallery-video.js\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js":
/*!********************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * blueimp Gallery YouTube Video Factory JS\n * https://github.com/blueimp/Gallery\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, YT */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ \"./node_modules/blueimp-gallery/js/blueimp-helper.js\"), __webpack_require__(/*! ./blueimp-gallery-video */ \"./node_modules/blueimp-gallery/js/blueimp-gallery-video.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(function ($, Gallery) {\n  'use strict'\n\n  if (!window.postMessage) {\n    return Gallery\n  }\n\n  $.extend(Gallery.prototype.options, {\n    // The list object property (or data attribute) with the YouTube video id:\n    youTubeVideoIdProperty: 'youtube',\n    // Optional object with parameters passed to the YouTube video player:\n    // https://developers.google.com/youtube/player_parameters\n    youTubePlayerVars: {\n      wmode: 'transparent'\n    },\n    // Require a click on the native YouTube player for the initial playback:\n    youTubeClickToPlay: true\n  })\n\n  var textFactory =\n    Gallery.prototype.textFactory || Gallery.prototype.imageFactory\n  var YouTubePlayer = function (videoId, playerVars, clickToPlay) {\n    this.videoId = videoId\n    this.playerVars = playerVars\n    this.clickToPlay = clickToPlay\n    this.element = document.createElement('div')\n    this.listeners = {}\n  }\n\n  $.extend(YouTubePlayer.prototype, {\n    canPlayType: function () {\n      return true\n    },\n\n    on: function (type, func) {\n      this.listeners[type] = func\n      return this\n    },\n\n    loadAPI: function () {\n      var that = this\n      var onYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady\n      var apiUrl = '//www.youtube.com/iframe_api'\n      var scriptTags = document.getElementsByTagName('script')\n      var i = scriptTags.length\n      var scriptTag\n      window.onYouTubeIframeAPIReady = function () {\n        if (onYouTubeIframeAPIReady) {\n          onYouTubeIframeAPIReady.apply(this)\n        }\n        if (that.playOnReady) {\n          that.play()\n        }\n      }\n      while (i) {\n        i -= 1\n        if (scriptTags[i].src === apiUrl) {\n          return\n        }\n      }\n      scriptTag = document.createElement('script')\n      scriptTag.src = apiUrl\n      scriptTags[0].parentNode.insertBefore(scriptTag, scriptTags[0])\n    },\n\n    onReady: function () {\n      this.ready = true\n      if (this.playOnReady) {\n        this.play()\n      }\n    },\n\n    onPlaying: function () {\n      if (this.playStatus < 2) {\n        this.listeners.playing()\n        this.playStatus = 2\n      }\n    },\n\n    onPause: function () {\n      Gallery.prototype.setTimeout.call(this, this.checkSeek, null, 2000)\n    },\n\n    checkSeek: function () {\n      if (\n        this.stateChange === YT.PlayerState.PAUSED ||\n        this.stateChange === YT.PlayerState.ENDED\n      ) {\n        // check if current state change is actually paused\n        this.listeners.pause()\n        delete this.playStatus\n      }\n    },\n\n    onStateChange: function (event) {\n      switch (event.data) {\n        case YT.PlayerState.PLAYING:\n          this.hasPlayed = true\n          this.onPlaying()\n          break\n        case YT.PlayerState.PAUSED:\n        case YT.PlayerState.ENDED:\n          this.onPause()\n          break\n      }\n      // Save most recent state change to this.stateChange\n      this.stateChange = event.data\n    },\n\n    onError: function (event) {\n      this.listeners.error(event)\n    },\n\n    play: function () {\n      var that = this\n      if (!this.playStatus) {\n        this.listeners.play()\n        this.playStatus = 1\n      }\n      if (this.ready) {\n        if (\n          !this.hasPlayed &&\n          (this.clickToPlay ||\n            (window.navigator &&\n              /iP(hone|od|ad)/.test(window.navigator.platform)))\n        ) {\n          // Manually trigger the playing callback if clickToPlay\n          // is enabled and to workaround a limitation in iOS,\n          // which requires synchronous user interaction to start\n          // the video playback:\n          this.onPlaying()\n        } else {\n          this.player.playVideo()\n        }\n      } else {\n        this.playOnReady = true\n        if (!(window.YT && YT.Player)) {\n          this.loadAPI()\n        } else if (!this.player) {\n          this.player = new YT.Player(this.element, {\n            videoId: this.videoId,\n            playerVars: this.playerVars,\n            events: {\n              onReady: function () {\n                that.onReady()\n              },\n              onStateChange: function (event) {\n                that.onStateChange(event)\n              },\n              onError: function (event) {\n                that.onError(event)\n              }\n            }\n          })\n        }\n      }\n    },\n\n    pause: function () {\n      if (this.ready) {\n        this.player.pauseVideo()\n      } else if (this.playStatus) {\n        delete this.playOnReady\n        this.listeners.pause()\n        delete this.playStatus\n      }\n    }\n  })\n\n  $.extend(Gallery.prototype, {\n    YouTubePlayer: YouTubePlayer,\n\n    textFactory: function (obj, callback) {\n      var options = this.options\n      var videoId = this.getItemProperty(obj, options.youTubeVideoIdProperty)\n      if (videoId) {\n        if (this.getItemProperty(obj, options.urlProperty) === undefined) {\n          obj[options.urlProperty] = '//www.youtube.com/watch?v=' + videoId\n        }\n        if (\n          this.getItemProperty(obj, options.videoPosterProperty) === undefined\n        ) {\n          obj[options.videoPosterProperty] =\n            '//img.youtube.com/vi/' + videoId + '/maxresdefault.jpg'\n        }\n        return this.videoFactory(\n          obj,\n          callback,\n          new YouTubePlayer(\n            videoId,\n            options.youTubePlayerVars,\n            options.youTubeClickToPlay\n          )\n        )\n      }\n      return textFactory.call(this, obj, callback)\n    }\n  })\n\n  return Gallery\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-gallery.js":
/*!************************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-gallery.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * blueimp Gallery JS\n * https://github.com/blueimp/Gallery\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Swipe implementation based on\n * https://github.com/bradbirdsall/Swipe\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, DocumentTouch */\n\n/* eslint-disable no-param-reassign */\n\n;(function (factory) {\n  'use strict'\n  if (true) {\n    // Register as an anonymous AMD module:\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./blueimp-helper */ \"./node_modules/blueimp-gallery/js/blueimp-helper.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(function ($) {\n  'use strict'\n\n  /**\n   * Gallery constructor\n   *\n   * @class\n   * @param {Array|NodeList} list Gallery content\n   * @param {object} [options] Gallery options\n   * @returns {object} Gallery object\n   */\n  function Gallery(list, options) {\n    if (document.body.style.maxHeight === undefined) {\n      // document.body.style.maxHeight is undefined on IE6 and lower\n      return null\n    }\n    if (!this || this.options !== Gallery.prototype.options) {\n      // Called as function instead of as constructor,\n      // so we simply return a new instance:\n      return new Gallery(list, options)\n    }\n    if (!list || !list.length) {\n      this.console.log(\n        'blueimp Gallery: No or empty list provided as first argument.',\n        list\n      )\n      return\n    }\n    this.list = list\n    this.num = list.length\n    this.initOptions(options)\n    this.initialize()\n  }\n\n  $.extend(Gallery.prototype, {\n    options: {\n      // The Id, element or querySelector of the gallery widget:\n      container: '#blueimp-gallery',\n      // The tag name, Id, element or querySelector of the slides container:\n      slidesContainer: 'div',\n      // The tag name, Id, element or querySelector of the title element:\n      titleElement: 'h3',\n      // The class to add when the gallery is visible:\n      displayClass: 'blueimp-gallery-display',\n      // The class to add when the gallery controls are visible:\n      controlsClass: 'blueimp-gallery-controls',\n      // The class to add when the gallery only displays one element:\n      singleClass: 'blueimp-gallery-single',\n      // The class to add when the left edge has been reached:\n      leftEdgeClass: 'blueimp-gallery-left',\n      // The class to add when the right edge has been reached:\n      rightEdgeClass: 'blueimp-gallery-right',\n      // The class to add when the automatic slideshow is active:\n      playingClass: 'blueimp-gallery-playing',\n      // The class for all slides:\n      slideClass: 'slide',\n      // The slide class for loading elements:\n      slideLoadingClass: 'slide-loading',\n      // The slide class for elements that failed to load:\n      slideErrorClass: 'slide-error',\n      // The class for the content element loaded into each slide:\n      slideContentClass: 'slide-content',\n      // The class for the \"toggle\" control:\n      toggleClass: 'toggle',\n      // The class for the \"prev\" control:\n      prevClass: 'prev',\n      // The class for the \"next\" control:\n      nextClass: 'next',\n      // The class for the \"close\" control:\n      closeClass: 'close',\n      // The class for the \"play-pause\" toggle control:\n      playPauseClass: 'play-pause',\n      // The list object property (or data attribute) with the object type:\n      typeProperty: 'type',\n      // The list object property (or data attribute) with the object title:\n      titleProperty: 'title',\n      // The list object property (or data attribute) with the object alt text:\n      altTextProperty: 'alt',\n      // The list object property (or data attribute) with the object URL:\n      urlProperty: 'href',\n      // The list object property (or data attribute) with the object srcset URL(s):\n      srcsetProperty: 'urlset',\n      // The gallery listens for transitionend events before triggering the\n      // opened and closed events, unless the following option is set to false:\n      displayTransition: true,\n      // Defines if the gallery slides are cleared from the gallery modal,\n      // or reused for the next gallery initialization:\n      clearSlides: true,\n      // Defines if images should be stretched to fill the available space,\n      // while maintaining their aspect ratio (will only be enabled for browsers\n      // supporting background-size=\"contain\", which excludes IE < 9).\n      // Set to \"cover\", to make images cover all available space (requires\n      // support for background-size=\"cover\", which excludes IE < 9):\n      stretchImages: false,\n      // Toggle the controls on pressing the Return key:\n      toggleControlsOnReturn: true,\n      // Toggle the controls on slide click:\n      toggleControlsOnSlideClick: true,\n      // Toggle the automatic slideshow interval on pressing the Space key:\n      toggleSlideshowOnSpace: true,\n      // Navigate the gallery by pressing left and right on the keyboard:\n      enableKeyboardNavigation: true,\n      // Close the gallery on pressing the Esc key:\n      closeOnEscape: true,\n      // Close the gallery when clicking on an empty slide area:\n      closeOnSlideClick: true,\n      // Close the gallery by swiping up or down:\n      closeOnSwipeUpOrDown: true,\n      // Emulate touch events on mouse-pointer devices such as desktop browsers:\n      emulateTouchEvents: true,\n      // Stop touch events from bubbling up to ancestor elements of the Gallery:\n      stopTouchEventsPropagation: false,\n      // Hide the page scrollbars:\n      hidePageScrollbars: true,\n      // Stops any touches on the container from scrolling the page:\n      disableScroll: true,\n      // Carousel mode (shortcut for carousel specific options):\n      carousel: false,\n      // Allow continuous navigation, moving from last to first\n      // and from first to last slide:\n      continuous: true,\n      // Remove elements outside of the preload range from the DOM:\n      unloadElements: true,\n      // Start with the automatic slideshow:\n      startSlideshow: false,\n      // Delay in milliseconds between slides for the automatic slideshow:\n      slideshowInterval: 5000,\n      // The direction the slides are moving: ltr=LeftToRight or rtl=RightToLeft\n      slideshowDirection: 'ltr',\n      // The starting index as integer.\n      // Can also be an object of the given list,\n      // or an equal object with the same url property:\n      index: 0,\n      // The number of elements to load around the current index:\n      preloadRange: 2,\n      // The transition speed between slide changes in milliseconds:\n      transitionSpeed: 400,\n      // The transition speed for automatic slide changes, set to an integer\n      // greater 0 to override the default transition speed:\n      slideshowTransitionSpeed: undefined,\n      // The event object for which the default action will be canceled\n      // on Gallery initialization (e.g. the click event to open the Gallery):\n      event: undefined,\n      // Callback function executed when the Gallery is initialized.\n      // Is called with the gallery instance as \"this\" object:\n      onopen: undefined,\n      // Callback function executed when the Gallery has been initialized\n      // and the initialization transition has been completed.\n      // Is called with the gallery instance as \"this\" object:\n      onopened: undefined,\n      // Callback function executed on slide change.\n      // Is called with the gallery instance as \"this\" object and the\n      // current index and slide as arguments:\n      onslide: undefined,\n      // Callback function executed after the slide change transition.\n      // Is called with the gallery instance as \"this\" object and the\n      // current index and slide as arguments:\n      onslideend: undefined,\n      // Callback function executed on slide content load.\n      // Is called with the gallery instance as \"this\" object and the\n      // slide index and slide element as arguments:\n      onslidecomplete: undefined,\n      // Callback function executed when the Gallery is about to be closed.\n      // Is called with the gallery instance as \"this\" object:\n      onclose: undefined,\n      // Callback function executed when the Gallery has been closed\n      // and the closing transition has been completed.\n      // Is called with the gallery instance as \"this\" object:\n      onclosed: undefined\n    },\n\n    carouselOptions: {\n      hidePageScrollbars: false,\n      toggleControlsOnReturn: false,\n      toggleSlideshowOnSpace: false,\n      enableKeyboardNavigation: false,\n      closeOnEscape: false,\n      closeOnSlideClick: false,\n      closeOnSwipeUpOrDown: false,\n      disableScroll: false,\n      startSlideshow: true\n    },\n\n    console:\n      window.console && typeof window.console.log === 'function'\n        ? window.console\n        : { log: function () {} },\n\n    // Detect touch, transition, transform and background-size support:\n    support: (function (element) {\n      var support = {\n        touch:\n          window.ontouchstart !== undefined ||\n          (window.DocumentTouch && document instanceof DocumentTouch)\n      }\n      var transitions = {\n        webkitTransition: {\n          end: 'webkitTransitionEnd',\n          prefix: '-webkit-'\n        },\n        MozTransition: {\n          end: 'transitionend',\n          prefix: '-moz-'\n        },\n        OTransition: {\n          end: 'otransitionend',\n          prefix: '-o-'\n        },\n        transition: {\n          end: 'transitionend',\n          prefix: ''\n        }\n      }\n      var prop\n      for (prop in transitions) {\n        if (\n          Object.prototype.hasOwnProperty.call(transitions, prop) &&\n          element.style[prop] !== undefined\n        ) {\n          support.transition = transitions[prop]\n          support.transition.name = prop\n          break\n        }\n      }\n      /**\n       * Tests browser support\n       */\n      function elementTests() {\n        var transition = support.transition\n        var prop\n        var translateZ\n        document.body.appendChild(element)\n        if (transition) {\n          prop = transition.name.slice(0, -9) + 'ransform'\n          if (element.style[prop] !== undefined) {\n            element.style[prop] = 'translateZ(0)'\n            translateZ = window\n              .getComputedStyle(element)\n              .getPropertyValue(transition.prefix + 'transform')\n            support.transform = {\n              prefix: transition.prefix,\n              name: prop,\n              translate: true,\n              translateZ: !!translateZ && translateZ !== 'none'\n            }\n          }\n        }\n        if (element.style.backgroundSize !== undefined) {\n          support.backgroundSize = {}\n          element.style.backgroundSize = 'contain'\n          support.backgroundSize.contain =\n            window\n              .getComputedStyle(element)\n              .getPropertyValue('background-size') === 'contain'\n          element.style.backgroundSize = 'cover'\n          support.backgroundSize.cover =\n            window\n              .getComputedStyle(element)\n              .getPropertyValue('background-size') === 'cover'\n        }\n        document.body.removeChild(element)\n      }\n      if (document.body) {\n        elementTests()\n      } else {\n        $(document).on('DOMContentLoaded', elementTests)\n      }\n      return support\n      // Test element, has to be standard HTML and must not be hidden\n      // for the CSS3 tests using window.getComputedStyle to be applicable:\n    })(document.createElement('div')),\n\n    requestAnimationFrame:\n      window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame,\n\n    cancelAnimationFrame:\n      window.cancelAnimationFrame ||\n      window.webkitCancelRequestAnimationFrame ||\n      window.webkitCancelAnimationFrame ||\n      window.mozCancelAnimationFrame,\n\n    initialize: function () {\n      this.initStartIndex()\n      if (this.initWidget() === false) {\n        return false\n      }\n      this.initEventListeners()\n      // Load the slide at the given index:\n      this.onslide(this.index)\n      // Manually trigger the slideend event for the initial slide:\n      this.ontransitionend()\n      // Start the automatic slideshow if applicable:\n      if (this.options.startSlideshow) {\n        this.play()\n      }\n    },\n\n    slide: function (to, speed) {\n      window.clearTimeout(this.timeout)\n      var index = this.index\n      var direction\n      var naturalDirection\n      var diff\n      if (index === to || this.num === 1) {\n        return\n      }\n      if (!speed) {\n        speed = this.options.transitionSpeed\n      }\n      if (this.support.transform) {\n        if (!this.options.continuous) {\n          to = this.circle(to)\n        }\n        // 1: backward, -1: forward:\n        direction = Math.abs(index - to) / (index - to)\n        // Get the actual position of the slide:\n        if (this.options.continuous) {\n          naturalDirection = direction\n          direction = -this.positions[this.circle(to)] / this.slideWidth\n          // If going forward but to < index, use to = slides.length + to\n          // If going backward but to > index, use to = -slides.length + to\n          if (direction !== naturalDirection) {\n            to = -direction * this.num + to\n          }\n        }\n        diff = Math.abs(index - to) - 1\n        // Move all the slides between index and to in the right direction:\n        while (diff) {\n          diff -= 1\n          this.move(\n            this.circle((to > index ? to : index) - diff - 1),\n            this.slideWidth * direction,\n            0\n          )\n        }\n        to = this.circle(to)\n        this.move(index, this.slideWidth * direction, speed)\n        this.move(to, 0, speed)\n        if (this.options.continuous) {\n          this.move(\n            this.circle(to - direction),\n            -(this.slideWidth * direction),\n            0\n          )\n        }\n      } else {\n        to = this.circle(to)\n        this.animate(index * -this.slideWidth, to * -this.slideWidth, speed)\n      }\n      this.onslide(to)\n    },\n\n    getIndex: function () {\n      return this.index\n    },\n\n    getNumber: function () {\n      return this.num\n    },\n\n    prev: function () {\n      if (this.options.continuous || this.index) {\n        this.slide(this.index - 1)\n      }\n    },\n\n    next: function () {\n      if (this.options.continuous || this.index < this.num - 1) {\n        this.slide(this.index + 1)\n      }\n    },\n\n    play: function (time) {\n      var that = this\n      var nextIndex =\n        this.index + (this.options.slideshowDirection === 'rtl' ? -1 : 1)\n      window.clearTimeout(this.timeout)\n      this.interval = time || this.options.slideshowInterval\n      if (this.elements[this.index] > 1) {\n        this.timeout = this.setTimeout(\n          (!this.requestAnimationFrame && this.slide) ||\n            function (to, speed) {\n              that.animationFrameId = that.requestAnimationFrame.call(\n                window,\n                function () {\n                  that.slide(to, speed)\n                }\n              )\n            },\n          [nextIndex, this.options.slideshowTransitionSpeed],\n          this.interval\n        )\n      }\n      this.container.addClass(this.options.playingClass)\n    },\n\n    pause: function () {\n      window.clearTimeout(this.timeout)\n      this.interval = null\n      if (this.cancelAnimationFrame) {\n        this.cancelAnimationFrame.call(window, this.animationFrameId)\n        this.animationFrameId = null\n      }\n      this.container.removeClass(this.options.playingClass)\n    },\n\n    add: function (list) {\n      var i\n      if (!list.concat) {\n        // Make a real array out of the list to add:\n        list = Array.prototype.slice.call(list)\n      }\n      if (!this.list.concat) {\n        // Make a real array out of the Gallery list:\n        this.list = Array.prototype.slice.call(this.list)\n      }\n      this.list = this.list.concat(list)\n      this.num = this.list.length\n      if (this.num > 2 && this.options.continuous === null) {\n        this.options.continuous = true\n        this.container.removeClass(this.options.leftEdgeClass)\n      }\n      this.container\n        .removeClass(this.options.rightEdgeClass)\n        .removeClass(this.options.singleClass)\n      for (i = this.num - list.length; i < this.num; i += 1) {\n        this.addSlide(i)\n        this.positionSlide(i)\n      }\n      this.positions.length = this.num\n      this.initSlides(true)\n    },\n\n    resetSlides: function () {\n      this.slidesContainer.empty()\n      this.unloadAllSlides()\n      this.slides = []\n    },\n\n    handleClose: function () {\n      var options = this.options\n      this.destroyEventListeners()\n      // Cancel the slideshow:\n      this.pause()\n      this.container[0].style.display = 'none'\n      this.container\n        .removeClass(options.displayClass)\n        .removeClass(options.singleClass)\n        .removeClass(options.leftEdgeClass)\n        .removeClass(options.rightEdgeClass)\n      if (options.hidePageScrollbars) {\n        document.body.style.overflow = this.bodyOverflowStyle\n      }\n      if (this.options.clearSlides) {\n        this.resetSlides()\n      }\n      if (this.options.onclosed) {\n        this.options.onclosed.call(this)\n      }\n    },\n\n    close: function () {\n      var that = this\n      /**\n       * Close handler\n       *\n       * @param {event} event Close event\n       */\n      function closeHandler(event) {\n        if (event.target === that.container[0]) {\n          that.container.off(that.support.transition.end, closeHandler)\n          that.handleClose()\n        }\n      }\n      if (this.options.onclose) {\n        this.options.onclose.call(this)\n      }\n      if (this.support.transition && this.options.displayTransition) {\n        this.container.on(this.support.transition.end, closeHandler)\n        this.container.removeClass(this.options.displayClass)\n      } else {\n        this.handleClose()\n      }\n    },\n\n    circle: function (index) {\n      // Always return a number inside of the slides index range:\n      return (this.num + (index % this.num)) % this.num\n    },\n\n    move: function (index, dist, speed) {\n      this.translateX(index, dist, speed)\n      this.positions[index] = dist\n    },\n\n    translate: function (index, x, y, speed) {\n      if (!this.slides[index]) return\n      var style = this.slides[index].style\n      var transition = this.support.transition\n      var transform = this.support.transform\n      style[transition.name + 'Duration'] = speed + 'ms'\n      style[transform.name] =\n        'translate(' +\n        x +\n        'px, ' +\n        y +\n        'px)' +\n        (transform.translateZ ? ' translateZ(0)' : '')\n    },\n\n    translateX: function (index, x, speed) {\n      this.translate(index, x, 0, speed)\n    },\n\n    translateY: function (index, y, speed) {\n      this.translate(index, 0, y, speed)\n    },\n\n    animate: function (from, to, speed) {\n      if (!speed) {\n        this.slidesContainer[0].style.left = to + 'px'\n        return\n      }\n      var that = this\n      var start = new Date().getTime()\n      var timer = window.setInterval(function () {\n        var timeElap = new Date().getTime() - start\n        if (timeElap > speed) {\n          that.slidesContainer[0].style.left = to + 'px'\n          that.ontransitionend()\n          window.clearInterval(timer)\n          return\n        }\n        that.slidesContainer[0].style.left =\n          (to - from) * (Math.floor((timeElap / speed) * 100) / 100) +\n          from +\n          'px'\n      }, 4)\n    },\n\n    preventDefault: function (event) {\n      if (event.preventDefault) {\n        event.preventDefault()\n      } else {\n        event.returnValue = false\n      }\n    },\n\n    stopPropagation: function (event) {\n      if (event.stopPropagation) {\n        event.stopPropagation()\n      } else {\n        event.cancelBubble = true\n      }\n    },\n\n    onresize: function () {\n      this.initSlides(true)\n    },\n\n    onmousedown: function (event) {\n      // Trigger on clicks of the left mouse button only\n      // and exclude video & audio elements:\n      if (\n        event.which &&\n        event.which === 1 &&\n        event.target.nodeName !== 'VIDEO' &&\n        event.target.nodeName !== 'AUDIO'\n      ) {\n        // Preventing the default mousedown action is required\n        // to make touch emulation work with Firefox:\n        event.preventDefault()\n        ;(event.originalEvent || event).touches = [\n          {\n            pageX: event.pageX,\n            pageY: event.pageY\n          }\n        ]\n        this.ontouchstart(event)\n      }\n    },\n\n    onmousemove: function (event) {\n      if (this.touchStart) {\n        ;(event.originalEvent || event).touches = [\n          {\n            pageX: event.pageX,\n            pageY: event.pageY\n          }\n        ]\n        this.ontouchmove(event)\n      }\n    },\n\n    onmouseup: function (event) {\n      if (this.touchStart) {\n        this.ontouchend(event)\n        delete this.touchStart\n      }\n    },\n\n    onmouseout: function (event) {\n      if (this.touchStart) {\n        var target = event.target\n        var related = event.relatedTarget\n        if (!related || (related !== target && !$.contains(target, related))) {\n          this.onmouseup(event)\n        }\n      }\n    },\n\n    ontouchstart: function (event) {\n      if (this.options.stopTouchEventsPropagation) {\n        this.stopPropagation(event)\n      }\n      // jQuery doesn't copy touch event properties by default,\n      // so we have to access the originalEvent object:\n      var touches = (event.originalEvent || event).touches[0]\n      this.touchStart = {\n        // Remember the initial touch coordinates:\n        x: touches.pageX,\n        y: touches.pageY,\n        // Store the time to determine touch duration:\n        time: Date.now()\n      }\n      // Helper variable to detect scroll movement:\n      this.isScrolling = undefined\n      // Reset delta values:\n      this.touchDelta = {}\n    },\n\n    ontouchmove: function (event) {\n      if (this.options.stopTouchEventsPropagation) {\n        this.stopPropagation(event)\n      }\n      // jQuery doesn't copy touch event properties by default,\n      // so we have to access the originalEvent object:\n      var touches = (event.originalEvent || event).touches[0]\n      var scale = (event.originalEvent || event).scale\n      var index = this.index\n      var touchDeltaX\n      var indices\n      // Ensure this is a one touch swipe and not, e.g. a pinch:\n      if (touches.length > 1 || (scale && scale !== 1)) {\n        return\n      }\n      if (this.options.disableScroll) {\n        event.preventDefault()\n      }\n      // Measure change in x and y coordinates:\n      this.touchDelta = {\n        x: touches.pageX - this.touchStart.x,\n        y: touches.pageY - this.touchStart.y\n      }\n      touchDeltaX = this.touchDelta.x\n      // Detect if this is a vertical scroll movement (run only once per touch):\n      if (this.isScrolling === undefined) {\n        this.isScrolling =\n          this.isScrolling ||\n          Math.abs(touchDeltaX) < Math.abs(this.touchDelta.y)\n      }\n      if (!this.isScrolling) {\n        // Always prevent horizontal scroll:\n        event.preventDefault()\n        // Stop the slideshow:\n        window.clearTimeout(this.timeout)\n        if (this.options.continuous) {\n          indices = [this.circle(index + 1), index, this.circle(index - 1)]\n        } else {\n          // Increase resistance if first slide and sliding left\n          // or last slide and sliding right:\n          this.touchDelta.x = touchDeltaX =\n            touchDeltaX /\n            ((!index && touchDeltaX > 0) ||\n            (index === this.num - 1 && touchDeltaX < 0)\n              ? Math.abs(touchDeltaX) / this.slideWidth + 1\n              : 1)\n          indices = [index]\n          if (index) {\n            indices.push(index - 1)\n          }\n          if (index < this.num - 1) {\n            indices.unshift(index + 1)\n          }\n        }\n        while (indices.length) {\n          index = indices.pop()\n          this.translateX(index, touchDeltaX + this.positions[index], 0)\n        }\n      } else {\n        this.translateY(index, this.touchDelta.y + this.positions[index], 0)\n      }\n    },\n\n    ontouchend: function (event) {\n      if (this.options.stopTouchEventsPropagation) {\n        this.stopPropagation(event)\n      }\n      var index = this.index\n      var speed = this.options.transitionSpeed\n      var slideWidth = this.slideWidth\n      var isShortDuration = Number(Date.now() - this.touchStart.time) < 250\n      // Determine if slide attempt triggers next/prev slide:\n      var isValidSlide =\n        (isShortDuration && Math.abs(this.touchDelta.x) > 20) ||\n        Math.abs(this.touchDelta.x) > slideWidth / 2\n      // Determine if slide attempt is past start or end:\n      var isPastBounds =\n        (!index && this.touchDelta.x > 0) ||\n        (index === this.num - 1 && this.touchDelta.x < 0)\n      var isValidClose =\n        !isValidSlide &&\n        this.options.closeOnSwipeUpOrDown &&\n        ((isShortDuration && Math.abs(this.touchDelta.y) > 20) ||\n          Math.abs(this.touchDelta.y) > this.slideHeight / 2)\n      var direction\n      var indexForward\n      var indexBackward\n      var distanceForward\n      var distanceBackward\n      if (this.options.continuous) {\n        isPastBounds = false\n      }\n      // Determine direction of swipe (true: right, false: left):\n      direction = this.touchDelta.x < 0 ? -1 : 1\n      if (!this.isScrolling) {\n        if (isValidSlide && !isPastBounds) {\n          indexForward = index + direction\n          indexBackward = index - direction\n          distanceForward = slideWidth * direction\n          distanceBackward = -slideWidth * direction\n          if (this.options.continuous) {\n            this.move(this.circle(indexForward), distanceForward, 0)\n            this.move(this.circle(index - 2 * direction), distanceBackward, 0)\n          } else if (indexForward >= 0 && indexForward < this.num) {\n            this.move(indexForward, distanceForward, 0)\n          }\n          this.move(index, this.positions[index] + distanceForward, speed)\n          this.move(\n            this.circle(indexBackward),\n            this.positions[this.circle(indexBackward)] + distanceForward,\n            speed\n          )\n          index = this.circle(indexBackward)\n          this.onslide(index)\n        } else {\n          // Move back into position\n          if (this.options.continuous) {\n            this.move(this.circle(index - 1), -slideWidth, speed)\n            this.move(index, 0, speed)\n            this.move(this.circle(index + 1), slideWidth, speed)\n          } else {\n            if (index) {\n              this.move(index - 1, -slideWidth, speed)\n            }\n            this.move(index, 0, speed)\n            if (index < this.num - 1) {\n              this.move(index + 1, slideWidth, speed)\n            }\n          }\n        }\n      } else {\n        if (isValidClose) {\n          this.close()\n        } else {\n          // Move back into position\n          this.translateY(index, 0, speed)\n        }\n      }\n    },\n\n    ontouchcancel: function (event) {\n      if (this.touchStart) {\n        this.ontouchend(event)\n        delete this.touchStart\n      }\n    },\n\n    ontransitionend: function (event) {\n      var slide = this.slides[this.index]\n      if (!event || slide === event.target) {\n        if (this.interval) {\n          this.play()\n        }\n        this.setTimeout(this.options.onslideend, [this.index, slide])\n      }\n    },\n\n    oncomplete: function (event) {\n      var target = event.target || event.srcElement\n      var parent = target && target.parentNode\n      var index\n      if (!target || !parent) {\n        return\n      }\n      index = this.getNodeIndex(parent)\n      $(parent).removeClass(this.options.slideLoadingClass)\n      if (event.type === 'error') {\n        $(parent).addClass(this.options.slideErrorClass)\n        this.elements[index] = 3 // Fail\n      } else {\n        this.elements[index] = 2 // Done\n      }\n      // Fix for IE7's lack of support for percentage max-height:\n      if (target.clientHeight > this.container[0].clientHeight) {\n        target.style.maxHeight = this.container[0].clientHeight\n      }\n      if (this.interval && this.slides[this.index] === parent) {\n        this.play()\n      }\n      this.setTimeout(this.options.onslidecomplete, [index, parent])\n    },\n\n    onload: function (event) {\n      this.oncomplete(event)\n    },\n\n    onerror: function (event) {\n      this.oncomplete(event)\n    },\n\n    onkeydown: function (event) {\n      switch (event.which || event.keyCode) {\n        case 13: // Return\n          if (this.options.toggleControlsOnReturn) {\n            this.preventDefault(event)\n            this.toggleControls()\n          }\n          break\n        case 27: // Esc\n          if (this.options.closeOnEscape) {\n            this.close()\n            // prevent Esc from closing other things\n            event.stopImmediatePropagation()\n          }\n          break\n        case 32: // Space\n          if (this.options.toggleSlideshowOnSpace) {\n            this.preventDefault(event)\n            this.toggleSlideshow()\n          }\n          break\n        case 37: // Left\n          if (this.options.enableKeyboardNavigation) {\n            this.preventDefault(event)\n            this.prev()\n          }\n          break\n        case 39: // Right\n          if (this.options.enableKeyboardNavigation) {\n            this.preventDefault(event)\n            this.next()\n          }\n          break\n      }\n    },\n\n    handleClick: function (event) {\n      var options = this.options\n      var target = event.target || event.srcElement\n      var parent = target.parentNode\n      /**\n       * Checks if the target from the close has the given class\n       *\n       * @param {string} className Class name\n       * @returns {boolean} Returns true if the target has the class name\n       */\n      function isTarget(className) {\n        return $(target).hasClass(className) || $(parent).hasClass(className)\n      }\n      if (isTarget(options.toggleClass)) {\n        // Click on \"toggle\" control\n        this.preventDefault(event)\n        this.toggleControls()\n      } else if (isTarget(options.prevClass)) {\n        // Click on \"prev\" control\n        this.preventDefault(event)\n        this.prev()\n      } else if (isTarget(options.nextClass)) {\n        // Click on \"next\" control\n        this.preventDefault(event)\n        this.next()\n      } else if (isTarget(options.closeClass)) {\n        // Click on \"close\" control\n        this.preventDefault(event)\n        this.close()\n      } else if (isTarget(options.playPauseClass)) {\n        // Click on \"play-pause\" control\n        this.preventDefault(event)\n        this.toggleSlideshow()\n      } else if (parent === this.slidesContainer[0]) {\n        // Click on slide background\n        if (options.closeOnSlideClick) {\n          this.preventDefault(event)\n          this.close()\n        } else if (options.toggleControlsOnSlideClick) {\n          this.preventDefault(event)\n          this.toggleControls()\n        }\n      } else if (\n        parent.parentNode &&\n        parent.parentNode === this.slidesContainer[0]\n      ) {\n        // Click on displayed element\n        if (options.toggleControlsOnSlideClick) {\n          this.preventDefault(event)\n          this.toggleControls()\n        }\n      }\n    },\n\n    onclick: function (event) {\n      if (\n        this.options.emulateTouchEvents &&\n        this.touchDelta &&\n        (Math.abs(this.touchDelta.x) > 20 || Math.abs(this.touchDelta.y) > 20)\n      ) {\n        delete this.touchDelta\n        return\n      }\n      return this.handleClick(event)\n    },\n\n    updateEdgeClasses: function (index) {\n      if (!index) {\n        this.container.addClass(this.options.leftEdgeClass)\n      } else {\n        this.container.removeClass(this.options.leftEdgeClass)\n      }\n      if (index === this.num - 1) {\n        this.container.addClass(this.options.rightEdgeClass)\n      } else {\n        this.container.removeClass(this.options.rightEdgeClass)\n      }\n    },\n\n    handleSlide: function (index) {\n      if (!this.options.continuous) {\n        this.updateEdgeClasses(index)\n      }\n      this.loadElements(index)\n      if (this.options.unloadElements) {\n        this.unloadElements(index)\n      }\n      this.setTitle(index)\n    },\n\n    onslide: function (index) {\n      this.index = index\n      this.handleSlide(index)\n      this.setTimeout(this.options.onslide, [index, this.slides[index]])\n    },\n\n    setTitle: function (index) {\n      var firstChild = this.slides[index].firstChild\n      var text = firstChild.title || firstChild.alt\n      var titleElement = this.titleElement\n      if (titleElement.length) {\n        this.titleElement.empty()\n        if (text) {\n          titleElement[0].appendChild(document.createTextNode(text))\n        }\n      }\n    },\n\n    setTimeout: function (func, args, wait) {\n      var that = this\n      return (\n        func &&\n        window.setTimeout(function () {\n          func.apply(that, args || [])\n        }, wait || 0)\n      )\n    },\n\n    imageFactory: function (obj, callback) {\n      var that = this\n      var img = this.imagePrototype.cloneNode(false)\n      var url = obj\n      var backgroundSize = this.options.stretchImages\n      var called\n      var element\n      var title\n      var altText\n      /**\n       * Wraps the callback function for the load/error event\n       *\n       * @param {event} event load/error event\n       * @returns {number} timeout ID\n       */\n      function callbackWrapper(event) {\n        if (!called) {\n          event = {\n            type: event.type,\n            target: element\n          }\n          if (!element.parentNode) {\n            // Fix for IE7 firing the load event for\n            // cached images before the element could\n            // be added to the DOM:\n            return that.setTimeout(callbackWrapper, [event])\n          }\n          called = true\n          $(img).off('load error', callbackWrapper)\n          if (backgroundSize) {\n            if (event.type === 'load') {\n              element.style.background = 'url(\"' + url + '\") center no-repeat'\n              element.style.backgroundSize = backgroundSize\n            }\n          }\n          callback(event)\n        }\n      }\n      if (typeof url !== 'string') {\n        url = this.getItemProperty(obj, this.options.urlProperty)\n        title = this.getItemProperty(obj, this.options.titleProperty)\n        altText =\n          this.getItemProperty(obj, this.options.altTextProperty) || title\n      }\n      if (backgroundSize === true) {\n        backgroundSize = 'contain'\n      }\n      backgroundSize =\n        this.support.backgroundSize &&\n        this.support.backgroundSize[backgroundSize] &&\n        backgroundSize\n      if (backgroundSize) {\n        element = this.elementPrototype.cloneNode(false)\n      } else {\n        element = img\n        img.draggable = false\n      }\n      if (title) {\n        element.title = title\n      }\n      if (altText) {\n        element.alt = altText\n      }\n      $(img).on('load error', callbackWrapper)\n      img.src = url\n      return element\n    },\n\n    createElement: function (obj, callback) {\n      var type = obj && this.getItemProperty(obj, this.options.typeProperty)\n      var factory =\n        (type && this[type.split('/')[0] + 'Factory']) || this.imageFactory\n      var element = obj && factory.call(this, obj, callback)\n      var srcset = this.getItemProperty(obj, this.options.srcsetProperty)\n      if (!element) {\n        element = this.elementPrototype.cloneNode(false)\n        this.setTimeout(callback, [\n          {\n            type: 'error',\n            target: element\n          }\n        ])\n      }\n      if (srcset) {\n        element.setAttribute('srcset', srcset)\n      }\n      $(element).addClass(this.options.slideContentClass)\n      return element\n    },\n\n    loadElement: function (index) {\n      if (!this.elements[index]) {\n        if (this.slides[index].firstChild) {\n          this.elements[index] = $(this.slides[index]).hasClass(\n            this.options.slideErrorClass\n          )\n            ? 3\n            : 2\n        } else {\n          this.elements[index] = 1 // Loading\n          $(this.slides[index]).addClass(this.options.slideLoadingClass)\n          this.slides[index].appendChild(\n            this.createElement(this.list[index], this.proxyListener)\n          )\n        }\n      }\n    },\n\n    loadElements: function (index) {\n      var limit = Math.min(this.num, this.options.preloadRange * 2 + 1)\n      var j = index\n      var i\n      for (i = 0; i < limit; i += 1) {\n        // First load the current slide element (0),\n        // then the next one (+1),\n        // then the previous one (-2),\n        // then the next after next (+2), etc.:\n        j += i * (i % 2 === 0 ? -1 : 1)\n        // Connect the ends of the list to load slide elements for\n        // continuous navigation:\n        j = this.circle(j)\n        this.loadElement(j)\n      }\n    },\n\n    unloadElements: function (index) {\n      var i, diff\n      for (i in this.elements) {\n        if (Object.prototype.hasOwnProperty.call(this.elements, i)) {\n          diff = Math.abs(index - i)\n          if (\n            diff > this.options.preloadRange &&\n            diff + this.options.preloadRange < this.num\n          ) {\n            this.unloadSlide(i)\n            delete this.elements[i]\n          }\n        }\n      }\n    },\n\n    addSlide: function (index) {\n      var slide = this.slidePrototype.cloneNode(false)\n      slide.setAttribute('data-index', index)\n      this.slidesContainer[0].appendChild(slide)\n      this.slides.push(slide)\n    },\n\n    positionSlide: function (index) {\n      var slide = this.slides[index]\n      slide.style.width = this.slideWidth + 'px'\n      if (this.support.transform) {\n        slide.style.left = index * -this.slideWidth + 'px'\n        this.move(\n          index,\n          this.index > index\n            ? -this.slideWidth\n            : this.index < index\n            ? this.slideWidth\n            : 0,\n          0\n        )\n      }\n    },\n\n    initSlides: function (reload) {\n      var clearSlides, i\n      if (!reload) {\n        this.positions = []\n        this.positions.length = this.num\n        this.elements = {}\n        this.imagePrototype = document.createElement('img')\n        this.elementPrototype = document.createElement('div')\n        this.slidePrototype = document.createElement('div')\n        $(this.slidePrototype).addClass(this.options.slideClass)\n        this.slides = this.slidesContainer[0].children\n        clearSlides =\n          this.options.clearSlides || this.slides.length !== this.num\n      }\n      this.slideWidth = this.container[0].clientWidth\n      this.slideHeight = this.container[0].clientHeight\n      this.slidesContainer[0].style.width = this.num * this.slideWidth + 'px'\n      if (clearSlides) {\n        this.resetSlides()\n      }\n      for (i = 0; i < this.num; i += 1) {\n        if (clearSlides) {\n          this.addSlide(i)\n        }\n        this.positionSlide(i)\n      }\n      // Reposition the slides before and after the given index:\n      if (this.options.continuous && this.support.transform) {\n        this.move(this.circle(this.index - 1), -this.slideWidth, 0)\n        this.move(this.circle(this.index + 1), this.slideWidth, 0)\n      }\n      if (!this.support.transform) {\n        this.slidesContainer[0].style.left =\n          this.index * -this.slideWidth + 'px'\n      }\n    },\n\n    unloadSlide: function (index) {\n      var slide, firstChild\n      slide = this.slides[index]\n      firstChild = slide.firstChild\n      if (firstChild !== null) {\n        slide.removeChild(firstChild)\n      }\n    },\n\n    unloadAllSlides: function () {\n      var i, len\n      for (i = 0, len = this.slides.length; i < len; i++) {\n        this.unloadSlide(i)\n      }\n    },\n\n    toggleControls: function () {\n      var controlsClass = this.options.controlsClass\n      if (this.container.hasClass(controlsClass)) {\n        this.container.removeClass(controlsClass)\n      } else {\n        this.container.addClass(controlsClass)\n      }\n    },\n\n    toggleSlideshow: function () {\n      if (!this.interval) {\n        this.play()\n      } else {\n        this.pause()\n      }\n    },\n\n    getNodeIndex: function (element) {\n      return parseInt(element.getAttribute('data-index'), 10)\n    },\n\n    getNestedProperty: function (obj, property) {\n      property.replace(\n        // Matches native JavaScript notation in a String,\n        // e.g. '[\"doubleQuoteProp\"].dotProp[2]'\n        // eslint-disable-next-line no-useless-escape\n        /\\[(?:'([^']+)'|\"([^\"]+)\"|(\\d+))\\]|(?:(?:^|\\.)([^\\.\\[]+))/g,\n        function (str, singleQuoteProp, doubleQuoteProp, arrayIndex, dotProp) {\n          var prop =\n            dotProp ||\n            singleQuoteProp ||\n            doubleQuoteProp ||\n            (arrayIndex && parseInt(arrayIndex, 10))\n          if (str && obj) {\n            obj = obj[prop]\n          }\n        }\n      )\n      return obj\n    },\n\n    getDataProperty: function (obj, property) {\n      var key\n      var prop\n      if (obj.dataset) {\n        key = property.replace(/-([a-z])/g, function (_, b) {\n          return b.toUpperCase()\n        })\n        prop = obj.dataset[key]\n      } else if (obj.getAttribute) {\n        prop = obj.getAttribute(\n          'data-' + property.replace(/([A-Z])/g, '-$1').toLowerCase()\n        )\n      }\n      if (typeof prop === 'string') {\n        // eslint-disable-next-line no-useless-escape\n        if (\n          /^(true|false|null|-?\\d+(\\.\\d+)?|\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/.test(prop)\n        ) {\n          try {\n            return $.parseJSON(prop)\n          } catch (ignore) {\n            // ignore JSON parsing errors\n          }\n        }\n        return prop\n      }\n    },\n\n    getItemProperty: function (obj, property) {\n      var prop = this.getDataProperty(obj, property)\n      if (prop === undefined) {\n        prop = obj[property]\n      }\n      if (prop === undefined) {\n        prop = this.getNestedProperty(obj, property)\n      }\n      return prop\n    },\n\n    initStartIndex: function () {\n      var index = this.options.index\n      var urlProperty = this.options.urlProperty\n      var i\n      // Check if the index is given as a list object:\n      if (index && typeof index !== 'number') {\n        for (i = 0; i < this.num; i += 1) {\n          if (\n            this.list[i] === index ||\n            this.getItemProperty(this.list[i], urlProperty) ===\n              this.getItemProperty(index, urlProperty)\n          ) {\n            index = i\n            break\n          }\n        }\n      }\n      // Make sure the index is in the list range:\n      this.index = this.circle(parseInt(index, 10) || 0)\n    },\n\n    initEventListeners: function () {\n      var that = this\n      var slidesContainer = this.slidesContainer\n      /**\n       * Proxy listener\n       *\n       * @param {event} event original event\n       */\n      function proxyListener(event) {\n        var type =\n          that.support.transition && that.support.transition.end === event.type\n            ? 'transitionend'\n            : event.type\n        that['on' + type](event)\n      }\n      $(window).on('resize', proxyListener)\n      $(document.body).on('keydown', proxyListener)\n      this.container.on('click', proxyListener)\n      if (this.support.touch) {\n        slidesContainer.on(\n          'touchstart touchmove touchend touchcancel',\n          proxyListener\n        )\n      } else if (this.options.emulateTouchEvents && this.support.transition) {\n        slidesContainer.on(\n          'mousedown mousemove mouseup mouseout',\n          proxyListener\n        )\n      }\n      if (this.support.transition) {\n        slidesContainer.on(this.support.transition.end, proxyListener)\n      }\n      this.proxyListener = proxyListener\n    },\n\n    destroyEventListeners: function () {\n      var slidesContainer = this.slidesContainer\n      var proxyListener = this.proxyListener\n      $(window).off('resize', proxyListener)\n      $(document.body).off('keydown', proxyListener)\n      this.container.off('click', proxyListener)\n      if (this.support.touch) {\n        slidesContainer.off(\n          'touchstart touchmove touchend touchcancel',\n          proxyListener\n        )\n      } else if (this.options.emulateTouchEvents && this.support.transition) {\n        slidesContainer.off(\n          'mousedown mousemove mouseup mouseout',\n          proxyListener\n        )\n      }\n      if (this.support.transition) {\n        slidesContainer.off(this.support.transition.end, proxyListener)\n      }\n    },\n\n    handleOpen: function () {\n      if (this.options.onopened) {\n        this.options.onopened.call(this)\n      }\n    },\n\n    initWidget: function () {\n      var that = this\n      /**\n       * Open handler\n       *\n       * @param {event} event Gallery open event\n       */\n      function openHandler(event) {\n        if (event.target === that.container[0]) {\n          that.container.off(that.support.transition.end, openHandler)\n          that.handleOpen()\n        }\n      }\n      this.container = $(this.options.container)\n      if (!this.container.length) {\n        this.console.log(\n          'blueimp Gallery: Widget container not found.',\n          this.options.container\n        )\n        return false\n      }\n      this.slidesContainer = this.container\n        .find(this.options.slidesContainer)\n        .first()\n      if (!this.slidesContainer.length) {\n        this.console.log(\n          'blueimp Gallery: Slides container not found.',\n          this.options.slidesContainer\n        )\n        return false\n      }\n      this.titleElement = this.container.find(this.options.titleElement).first()\n      if (this.num === 1) {\n        this.container.addClass(this.options.singleClass)\n      }\n      if (this.options.onopen) {\n        this.options.onopen.call(this)\n      }\n      if (this.support.transition && this.options.displayTransition) {\n        this.container.on(this.support.transition.end, openHandler)\n      } else {\n        this.handleOpen()\n      }\n      if (this.options.hidePageScrollbars) {\n        // Hide the page scrollbars:\n        this.bodyOverflowStyle = document.body.style.overflow\n        document.body.style.overflow = 'hidden'\n      }\n      this.container[0].style.display = 'block'\n      this.initSlides()\n      this.container.addClass(this.options.displayClass)\n    },\n\n    initOptions: function (options) {\n      // Create a copy of the prototype options:\n      this.options = $.extend({}, this.options)\n      // Check if carousel mode is enabled:\n      if (\n        (options && options.carousel) ||\n        (this.options.carousel && (!options || options.carousel !== false))\n      ) {\n        $.extend(this.options, this.carouselOptions)\n      }\n      // Override any given options:\n      $.extend(this.options, options)\n      if (this.num < 3) {\n        // 1 or 2 slides cannot be displayed continuous,\n        // remember the original option by setting to null instead of false:\n        this.options.continuous = this.options.continuous ? null : false\n      }\n      if (!this.support.transition) {\n        this.options.emulateTouchEvents = false\n      }\n      if (this.options.event) {\n        this.preventDefault(this.options.event)\n      }\n    }\n  })\n\n  return Gallery\n})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/js/blueimp-gallery.js\n");

/***/ }),

/***/ "./node_modules/blueimp-gallery/js/blueimp-helper.js":
/*!***********************************************************!*\
  !*** ./node_modules/blueimp-gallery/js/blueimp-helper.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * blueimp helper JS\n * https://github.com/blueimp/Gallery\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define */\n\n/* eslint-disable no-param-reassign */\n\n;(function () {\n  'use strict'\n\n  /**\n   * Object.assign polyfill\n   *\n   * @param {object} obj1 First object\n   * @param {object} obj2 Second object\n   * @returns {object} Merged object\n   */\n  function extend(obj1, obj2) {\n    var prop\n    for (prop in obj2) {\n      if (Object.prototype.hasOwnProperty.call(obj2, prop)) {\n        obj1[prop] = obj2[prop]\n      }\n    }\n    return obj1\n  }\n  /**\n   * Helper constructor\n   *\n   * @class\n   * @param {*} query jQuery type query argument\n   */\n  function Helper(query) {\n    if (!this || this.find !== Helper.prototype.find) {\n      // Called as function instead of as constructor,\n      // so we simply return a new instance:\n      return new Helper(query)\n    }\n    this.length = 0\n    if (query) {\n      if (typeof query === 'string') {\n        query = this.find(query)\n      }\n      if (query.nodeType || query === query.window) {\n        // Single HTML element\n        this.length = 1\n        this[0] = query\n      } else {\n        // HTML element collection\n        var i = query.length\n        this.length = i\n        while (i) {\n          i -= 1\n          this[i] = query[i]\n        }\n      }\n    }\n  }\n\n  Helper.extend = extend\n\n  Helper.contains = function (container, element) {\n    do {\n      element = element.parentNode\n      if (element === container) {\n        return true\n      }\n    } while (element)\n    return false\n  }\n\n  Helper.parseJSON = function (string) {\n    return window.JSON && JSON.parse(string)\n  }\n\n  extend(Helper.prototype, {\n    find: function (query) {\n      var container = this[0] || document\n      if (typeof query === 'string') {\n        if (container.querySelectorAll) {\n          query = container.querySelectorAll(query)\n        } else if (query.charAt(0) === '#') {\n          query = container.getElementById(query.slice(1))\n        } else {\n          query = container.getElementsByTagName(query)\n        }\n      }\n      return new Helper(query)\n    },\n\n    hasClass: function (className) {\n      if (!this[0]) {\n        return false\n      }\n      return new RegExp('(^|\\\\s+)' + className + '(\\\\s+|$)').test(\n        this[0].className\n      )\n    },\n\n    addClass: function (className) {\n      var i = this.length\n      var element\n      while (i) {\n        i -= 1\n        element = this[i]\n        if (!element.className) {\n          element.className = className\n          return this\n        }\n        if (this.hasClass(className)) {\n          return this\n        }\n        element.className += ' ' + className\n      }\n      return this\n    },\n\n    removeClass: function (className) {\n      var regexp = new RegExp('(^|\\\\s+)' + className + '(\\\\s+|$)')\n      var i = this.length\n      var element\n      while (i) {\n        i -= 1\n        element = this[i]\n        element.className = element.className.replace(regexp, ' ')\n      }\n      return this\n    },\n\n    on: function (eventName, handler) {\n      var eventNames = eventName.split(/\\s+/)\n      var i\n      var element\n      while (eventNames.length) {\n        eventName = eventNames.shift()\n        i = this.length\n        while (i) {\n          i -= 1\n          element = this[i]\n          if (element.addEventListener) {\n            element.addEventListener(eventName, handler, false)\n          } else if (element.attachEvent) {\n            element.attachEvent('on' + eventName, handler)\n          }\n        }\n      }\n      return this\n    },\n\n    off: function (eventName, handler) {\n      var eventNames = eventName.split(/\\s+/)\n      var i\n      var element\n      while (eventNames.length) {\n        eventName = eventNames.shift()\n        i = this.length\n        while (i) {\n          i -= 1\n          element = this[i]\n          if (element.removeEventListener) {\n            element.removeEventListener(eventName, handler, false)\n          } else if (element.detachEvent) {\n            element.detachEvent('on' + eventName, handler)\n          }\n        }\n      }\n      return this\n    },\n\n    empty: function () {\n      var i = this.length\n      var element\n      while (i) {\n        i -= 1\n        element = this[i]\n        while (element.hasChildNodes()) {\n          element.removeChild(element.lastChild)\n        }\n      }\n      return this\n    },\n\n    first: function () {\n      return new Helper(this[0])\n    }\n  })\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return Helper\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/blueimp-gallery/js/blueimp-helper.js\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/blueimp-gallery/css/blueimp-gallery.min.css":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/src??ref--6-2!./node_modules/blueimp-gallery/css/blueimp-gallery.min.css ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var escape = __webpack_require__(/*! ../../css-loader/lib/url/escape.js */ \"./node_modules/css-loader/lib/url/escape.js\");\nexports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"@charset \\\"UTF-8\\\";.blueimp-gallery,.blueimp-gallery>.slides>.slide>.slide-content{position:absolute;top:0;right:0;bottom:0;left:0;transition:opacity .2s linear;-webkit-backface-visibility:hidden;backface-visibility:hidden;-moz-backface-visibility:hidden}.blueimp-gallery>.slides>.slide>.slide-content{margin:auto;width:auto;height:auto;max-width:100%;max-height:100%;opacity:1}.blueimp-gallery{position:fixed;z-index:999999;overflow:hidden;background:#000;background:rgba(0,0,0,.9);opacity:0;display:none;direction:ltr;touch-action:none}.blueimp-gallery-carousel{position:relative;z-index:auto;margin:1em auto;padding-bottom:56.25%;box-shadow:0 0 10px #000;touch-action:pan-y}.blueimp-gallery-display{display:block;opacity:1}.blueimp-gallery>.slides{position:relative;height:100%;overflow:hidden}.blueimp-gallery-carousel>.slides{position:absolute}.blueimp-gallery>.slides>.slide{position:relative;float:left;height:100%;text-align:center;transition-timing-function:cubic-bezier(.645,.045,.355,1)}.blueimp-gallery>.slides>.slide-loading{background:url(\" + escape(__webpack_require__(/*! ../img/loading.gif */ \"./node_modules/blueimp-gallery/img/loading.gif\")) + \") center no-repeat;background-size:64px 64px}.blueimp-gallery>.slides>.slide-loading>.slide-content{opacity:0}.blueimp-gallery>.slides>.slide-error{background:url(\" + escape(__webpack_require__(/*! ../img/error.png */ \"./node_modules/blueimp-gallery/img/error.png\")) + \") center no-repeat}.blueimp-gallery>.slides>.slide-error>.slide-content{display:none}.blueimp-gallery>.next,.blueimp-gallery>.prev{position:absolute;top:50%;left:15px;width:40px;height:40px;margin-top:-23px;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;font-size:60px;font-weight:100;line-height:30px;color:#fff;text-decoration:none;text-shadow:0 0 2px #000;text-align:center;background:#222;background:rgba(0,0,0,.5);box-sizing:content-box;border:3px solid #fff;border-radius:23px;opacity:.5;cursor:pointer;display:none}.blueimp-gallery>.next{left:auto;right:15px}.blueimp-gallery>.close,.blueimp-gallery>.title{position:absolute;top:15px;left:15px;margin:0 40px 0 0;font-size:20px;line-height:30px;color:#fff;text-shadow:0 0 2px #000;opacity:.8;display:none}.blueimp-gallery>.close{padding:15px;right:15px;left:auto;margin:-15px;font-size:30px;text-decoration:none;cursor:pointer}.blueimp-gallery>.play-pause{position:absolute;right:15px;bottom:15px;width:15px;height:15px;background:url(\" + escape(__webpack_require__(/*! ../img/play-pause.png */ \"./node_modules/blueimp-gallery/img/play-pause.png\")) + \") 0 0 no-repeat;cursor:pointer;opacity:.5;display:none}.blueimp-gallery-playing>.play-pause{background-position:-15px 0}.blueimp-gallery-controls>.close,.blueimp-gallery-controls>.next,.blueimp-gallery-controls>.play-pause,.blueimp-gallery-controls>.prev,.blueimp-gallery-controls>.title{display:block;transform:translateZ(0)}.blueimp-gallery-left>.prev,.blueimp-gallery-right>.next,.blueimp-gallery-single>.next,.blueimp-gallery-single>.play-pause,.blueimp-gallery-single>.prev{display:none}.blueimp-gallery>.close,.blueimp-gallery>.next,.blueimp-gallery>.play-pause,.blueimp-gallery>.prev,.blueimp-gallery>.slides>.slide>.slide-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blueimp-gallery>.close:hover,.blueimp-gallery>.next:hover,.blueimp-gallery>.play-pause:hover,.blueimp-gallery>.prev:hover,.blueimp-gallery>.title:hover{color:#fff;opacity:1}body:last-child .blueimp-gallery>.slides>.slide-error{background-image:url(\" + escape(__webpack_require__(/*! ../img/error.svg */ \"./node_modules/blueimp-gallery/img/error.svg\")) + \")}body:last-child .blueimp-gallery>.play-pause{width:20px;height:20px;background-size:40px 20px;background-image:url(\" + escape(__webpack_require__(/*! ../img/play-pause.svg */ \"./node_modules/blueimp-gallery/img/play-pause.svg\")) + \")}body:last-child .blueimp-gallery-playing>.play-pause{background-position:-20px 0}*+html .blueimp-gallery>.slides>.slide{min-height:300px}*+html .blueimp-gallery>.slides>.slide>.slide-content{position:relative}.blueimp-gallery>.indicator{position:absolute;top:auto;right:15px;bottom:15px;left:15px;margin:0 40px;padding:0;list-style:none;text-align:center;line-height:10px;display:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.blueimp-gallery>.indicator>li{display:inline-block;width:9px;height:9px;margin:6px 3px 0 3px;box-sizing:content-box;border:1px solid transparent;background:#ccc;background:rgba(255,255,255,.25) center no-repeat;border-radius:5px;box-shadow:0 0 2px #000;opacity:.5;cursor:pointer}*+html .blueimp-gallery>.indicator>li{display:inline}.blueimp-gallery>.indicator>.active,.blueimp-gallery>.indicator>li:hover{background-color:#fff;border-color:#fff;opacity:1}.blueimp-gallery>.indicator>li:after{opacity:0;display:block;position:absolute;content:'';top:-5em;width:75px;height:75px;transition:transform .6s ease-out,opacity .4s ease-out;transform:translateX(-50%) translateY(0) translateZ(0);pointer-events:none}.blueimp-gallery>.indicator>li:hover:after{opacity:1;border-radius:50%;background:inherit;transform:translateX(-50%) translateY(-5px) translateZ(0)}.blueimp-gallery>.indicator>.active:after{display:none}.blueimp-gallery-controls>.indicator{display:block;transform:translateZ(0)}.blueimp-gallery-single>.indicator{display:none}.blueimp-gallery>.slides>.slide>.video-content>img{position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;width:auto;height:auto;max-width:100%;max-height:100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;-moz-backface-visibility:hidden}.blueimp-gallery>.slides>.slide>.video-content>video{position:absolute;top:0;left:0;width:100%;height:100%;display:none}.blueimp-gallery>.slides>.slide>.video-content>iframe{position:absolute;top:100%;left:0;width:100%;height:100%;border:none}.blueimp-gallery>.slides>.slide>.video-playing>iframe{top:0}.blueimp-gallery>.slides>.slide>.video-content>a{position:absolute;top:50%;right:0;left:0;margin:-64px auto 0;width:128px;height:128px;background:url(\" + escape(__webpack_require__(/*! ../img/video-play.png */ \"./node_modules/blueimp-gallery/img/video-play.png\")) + \") center no-repeat;opacity:.8;cursor:pointer}.blueimp-gallery>.slides>.slide>.video-playing>a,.blueimp-gallery>.slides>.slide>.video-playing>img{display:none}.blueimp-gallery>.slides>.slide>.video-playing>video{display:block}.blueimp-gallery>.slides>.slide>.video-loading>a{background:url(\" + escape(__webpack_require__(/*! ../img/loading.gif */ \"./node_modules/blueimp-gallery/img/loading.gif\")) + \") center no-repeat;background-size:64px 64px}*+html .blueimp-gallery>.slides>.slide>.video-content{height:100%}*+html .blueimp-gallery>.slides>.slide>.video-content>a{left:50%;margin-left:-64px}.blueimp-gallery>.slides>.slide>.video-content>a:hover{opacity:1}body:last-child .blueimp-gallery>.slides>.slide>.video-content:not(.video-loading)>a{background-image:url(\" + escape(__webpack_require__(/*! ../img/video-play.svg */ \"./node_modules/blueimp-gallery/img/video-play.svg\")) + \")}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/blueimp-gallery/css/blueimp-gallery.min.css\n");

/***/ }),

/***/ "./node_modules/vue-gallery/dist/js/vue-gallery.js":
/*!*********************************************************!*\
  !*** ./node_modules/vue-gallery/dist/js/vue-gallery.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! blueimp-gallery/css/blueimp-gallery.min.css */ \"./node_modules/blueimp-gallery/css/blueimp-gallery.min.css\"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-fullscreen.js */ \"./node_modules/blueimp-gallery/js/blueimp-gallery-fullscreen.js\"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-video.js */ \"./node_modules/blueimp-gallery/js/blueimp-gallery-video.js\"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery-youtube.js */ \"./node_modules/blueimp-gallery/js/blueimp-gallery-youtube.js\"), __webpack_require__(/*! blueimp-gallery/js/blueimp-gallery.js */ \"./node_modules/blueimp-gallery/js/blueimp-gallery.js\")) :\n  undefined;\n}(this, function (blueimpGallery_min_css, blueimpGalleryFullscreen_js, blueimpGalleryVideo_js, blueimpGalleryYoutube_js, blueimp) { 'use strict';\n\n  blueimp = blueimp && blueimp.hasOwnProperty('default') ? blueimp['default'] : blueimp;\n\n  //\n  var script = {\n    props: {\n      images: {\n        type: Array,\n        default: function _default() {\n          return [];\n        }\n      },\n      options: {\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      carousel: {\n        type: Boolean,\n        default: false\n      },\n      index: {\n        type: Number\n      },\n      id: {\n        type: String,\n        default: 'blueimp-gallery'\n      }\n    },\n    data: function data() {\n      return {\n        instance: null\n      };\n    },\n    watch: {\n      index: function index(value) {\n        if (this.carousel) {\n          return;\n        }\n\n        if (value !== null) {\n          this.open(value);\n        } else {\n          if (this.instance) {\n            this.instance.close();\n          }\n\n          this.$emit('close');\n        }\n      }\n    },\n    mounted: function mounted() {\n      if (this.carousel) {\n        this.open();\n      }\n    },\n    destroyed: function destroyed() {\n      if (this.instance !== null) {\n        this.instance.destroyEventListeners();\n        this.instance.close();\n        this.instance = null;\n      }\n    },\n    methods: {\n      open: function open() {\n        var _this = this;\n\n        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var instance = typeof blueimp.Gallery !== 'undefined' ? blueimp.Gallery : blueimp;\n        var options = Object.assign({\n          toggleControlsOnReturn: false,\n          toggleControlsOnSlideClick: false,\n          closeOnSlideClick: false,\n          carousel: this.carousel,\n          container: \"#\".concat(this.id),\n          index: index,\n          onopen: function onopen() {\n            return _this.$emit('onopen');\n          },\n          onopened: function onopened() {\n            return _this.$emit('onopened');\n          },\n          onslide: this.onSlideCustom,\n          onslideend: function onslideend(index, slide) {\n            return _this.$emit('onslideend', {\n              index: index,\n              slide: slide\n            });\n          },\n          onslidecomplete: function onslidecomplete(index, slide) {\n            return _this.$emit('onslidecomplete', {\n              index: index,\n              slide: slide\n            });\n          },\n          onclose: function onclose() {\n            return _this.$emit('close');\n          },\n          onclosed: function onclosed() {\n            return _this.$emit('onclosed');\n          }\n        }, this.options);\n\n        if (this.carousel) {\n          options.container = this.$el;\n        }\n\n        this.instance = instance(this.images, options);\n      },\n      onSlideCustom: function onSlideCustom(index, slide) {\n        this.$emit('onslide', {\n          index: index,\n          slide: slide\n        });\n        var image = this.images[index];\n\n        if (image !== undefined) {\n          var text = image.description;\n          var node = this.instance.container.find('.description');\n\n          if (text) {\n            node.empty();\n            node[0].appendChild(document.createTextNode(text));\n          }\n        }\n      }\n    }\n  };\n\n  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n  /* server only */\n  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n    if (typeof shadowMode !== 'boolean') {\n      createInjectorSSR = createInjector;\n      createInjector = shadowMode;\n      shadowMode = false;\n    } // Vue.extend constructor export interop.\n\n\n    var options = typeof script === 'function' ? script.options : script; // render functions\n\n    if (template && template.render) {\n      options.render = template.render;\n      options.staticRenderFns = template.staticRenderFns;\n      options._compiled = true; // functional template\n\n      if (isFunctionalTemplate) {\n        options.functional = true;\n      }\n    } // scopedId\n\n\n    if (scopeId) {\n      options._scopeId = scopeId;\n    }\n\n    var hook;\n\n    if (moduleIdentifier) {\n      // server build\n      hook = function hook(context) {\n        // 2.3 injection\n        context = context || // cached call\n        this.$vnode && this.$vnode.ssrContext || // stateful\n        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n        // 2.2 with runInNewContext: true\n\n        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n          context = __VUE_SSR_CONTEXT__;\n        } // inject component styles\n\n\n        if (style) {\n          style.call(this, createInjectorSSR(context));\n        } // register component module identifier for async chunk inference\n\n\n        if (context && context._registeredComponents) {\n          context._registeredComponents.add(moduleIdentifier);\n        }\n      }; // used by ssr in case component is cached and beforeCreate\n      // never gets called\n\n\n      options._ssrRegister = hook;\n    } else if (style) {\n      hook = shadowMode ? function () {\n        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n      } : function (context) {\n        style.call(this, createInjector(context));\n      };\n    }\n\n    if (hook) {\n      if (options.functional) {\n        // register for functional component in vue file\n        var originalRender = options.render;\n\n        options.render = function renderWithStyleInjection(h, context) {\n          hook.call(context);\n          return originalRender(h, context);\n        };\n      } else {\n        // inject component registration as beforeCreate hook\n        var existing = options.beforeCreate;\n        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n      }\n    }\n\n    return script;\n  }\n\n  var normalizeComponent_1 = normalizeComponent;\n\n  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n  function createInjector(context) {\n    return function (id, style) {\n      return addStyle(id, style);\n    };\n  }\n\n  var HEAD = document.head || document.getElementsByTagName('head')[0];\n  var styles = {};\n\n  function addStyle(id, css) {\n    var group = isOldIE ? css.media || 'default' : id;\n    var style = styles[group] || (styles[group] = {\n      ids: new Set(),\n      styles: []\n    });\n\n    if (!style.ids.has(id)) {\n      style.ids.add(id);\n      var code = css.source;\n\n      if (css.map) {\n        // https://developer.chrome.com/devtools/docs/javascript-debugging\n        // this makes source maps inside style tags work properly in Chrome\n        code += '\\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875\n\n        code += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';\n      }\n\n      if (!style.element) {\n        style.element = document.createElement('style');\n        style.element.type = 'text/css';\n        if (css.media) style.element.setAttribute('media', css.media);\n        HEAD.appendChild(style.element);\n      }\n\n      if ('styleSheet' in style.element) {\n        style.styles.push(code);\n        style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\\n');\n      } else {\n        var index = style.ids.size - 1;\n        var textNode = document.createTextNode(code);\n        var nodes = style.element.childNodes;\n        if (nodes[index]) style.element.removeChild(nodes[index]);\n        if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);\n      }\n    }\n  }\n\n  var browser = createInjector;\n\n  /* script */\n  const __vue_script__ = script;\n\n  /* template */\n  var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"blueimp-gallery blueimp-gallery-controls\",class:{'blueimp-gallery-carousel': _vm.carousel},attrs:{\"id\":_vm.id}},[_c('div',{staticClass:\"slides\"}),_vm._v(\" \"),_c('h3',{staticClass:\"title\"}),_vm._v(\" \"),_c('p',{staticClass:\"description\"}),_vm._v(\" \"),_c('a',{staticClass:\"prev\"},[_vm._t(\"prev\",[_vm._v(\"‹\")])],2),_vm._v(\" \"),_c('a',{staticClass:\"next\"},[_vm._t(\"next\",[_vm._v(\"›\")])],2),_vm._v(\" \"),(!_vm.carousel)?_c('a',{staticClass:\"close\"},[_vm._t(\"close\",[_vm._v(\"×\")])],2):_vm._e(),_vm._v(\" \"),(!_vm.carousel)?_c('ol',{staticClass:\"indicator\"}):_vm._e(),_vm._v(\" \"),(_vm.carousel)?_c('a',{staticClass:\"play-pause\"}):_vm._e()])};\n  var __vue_staticRenderFns__ = [];\n\n    /* style */\n    const __vue_inject_styles__ = function (inject) {\n      if (!inject) return\n      inject(\"data-v-6d2033ba_0\", { source: \".blueimp-gallery>.description{position:absolute;top:30px;left:15px;color:#fff;display:none}.blueimp-gallery-controls>.description{display:block}\", map: undefined, media: undefined });\n\n    };\n    /* scoped */\n    const __vue_scope_id__ = undefined;\n    /* module identifier */\n    const __vue_module_identifier__ = undefined;\n    /* functional template */\n    const __vue_is_functional_template__ = false;\n    /* style inject SSR */\n    \n\n    \n    var VueGallery = normalizeComponent_1(\n      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },\n      __vue_inject_styles__,\n      __vue_script__,\n      __vue_scope_id__,\n      __vue_is_functional_template__,\n      __vue_module_identifier__,\n      browser,\n      undefined\n    );\n\n  return VueGallery;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-gallery/dist/js/vue-gallery.js\n");

/***/ })

}]);